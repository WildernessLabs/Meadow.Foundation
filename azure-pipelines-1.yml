# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- pipelinedev

pr:
- pipelinedev

variables:
  solution: '**/Meadow.Foundation.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  internalFeedName: 'Meadow'
  preReleasePackageBranch: 'refs/heads/pipelinedev'
pool:
  vmImage: windows-2019

stages:
- stage: Build
  jobs:
    - job: Build_Solution
      steps:
        - task: NuGetToolInstaller@1
        - task: NuGetCommand@2
          condition: or(eq(variables['build.sourceBranch'], variables['preReleasePackageBranch']), eq(join('refs/heads/', variables['System.PullRequest.TargetBranch']), variables['preReleasePackageBranch']))
          inputs:
            feedsToUse: 'select' 
            vstsFeed: $(internalFeedName)
            restoreSolution: '$(solution)'
        - task: NuGetCommand@2
          condition: and(ne(variables['build.sourceBranch'], variables['preReleasePackageBranch']), ne(join('refs/heads/', variables['System.PullRequest.TargetBranch']), variables['preReleasePackageBranch']))
          inputs:
            feedsToUse: 'select' 
            restoreSolution: '$(solution)'
        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
#            msbuildArgs: /property:langversion=latest
        - task: CopyFiles@2
          inputs:
            Contents: '**\*.nupkg'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            flattenFolders: true
            cleanTargetFolder: true
            overWrite: true
        - task: PublishBuildArtifacts@1
          inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: packages

- stage: Deploy_Staging
  dependsOn: Build
  condition: and(succeeded('Build'), eq(variables['build.sourceBranch'], variables['preReleasePackageBranch']))
  jobs:
  - job: Publish_Nugets
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'packages'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: NuGetCommand@2
        displayName: 'nuget push'
        inputs:
          command: 'push'
          feedsToUse: 'select'
          packagesToPush: '$(System.ArtifactsDirectory)\**\*-*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: $(internalFeedName)
          versioningScheme: 'off'
          allowPackageConflicts: true




